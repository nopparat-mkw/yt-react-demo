{"version":3,"file":"static/js/600.1a11fdb6.chunk.js","mappings":"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","sources":["YoutubeLiveV3.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { Spin, Card, Row, Col, Typography } from \"antd\";\r\nconst { Meta } = Card;\r\nconst { Text } = Typography;\r\n\r\nconst YoutubeLiveV3 = () => {\r\n  const [liveVideos, setLiveVideos] = useState([]);\r\n  const [completedVideos, setCompletedVideos] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchVideos = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:8000/ytapi/videolive\"); // Change this URL to match your API endpoint\r\n        const { data } = response;\r\n\r\n        // Separate live and completed videos\r\n        const liveVideosData = data.filter(video => video.live);\r\n        const completedVideosData = data.filter(video => !video.live);\r\n\r\n        // Sort completed videos by publishedAt\r\n        completedVideosData.sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt));\r\n\r\n        setLiveVideos(liveVideosData);\r\n        setCompletedVideos(completedVideosData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching videos:', error.message);\r\n        setError(error.message);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchVideos();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <Spin size=\"large\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  const handleThumbnailClick = (videoId) => {\r\n    window.open(`https://www.youtube.com/watch?v=${videoId}`, \"_blank\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {liveVideos.length > 0 ? (\r\n        <Card\r\n          title={liveVideos[0].title}\r\n          style={{ maxWidth: 800, margin: \"0 auto\", marginBottom: 16 }}\r\n        >\r\n          <p>{liveVideos[0].description}</p>\r\n          <div style={{ position: \"relative\", paddingBottom: \"56.25%\", height: 0, overflow: \"hidden\", maxWidth: \"100%\" }}>\r\n            <iframe\r\n              title={liveVideos[0].title}\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              src={`https://www.youtube.com/embed/${liveVideos[0].videoId}`}\r\n              frameBorder=\"0\"\r\n              allowFullScreen\r\n              style={{ position: \"absolute\", top: 0, left: 0 }}\r\n            />\r\n          </div>\r\n          <Text strong>This is a live video.</Text>\r\n        </Card>\r\n      ) : (\r\n        <Card\r\n          title={completedVideos[0].title}\r\n          style={{ maxWidth: 800, margin: \"0 auto\", marginBottom: 16 }}\r\n        >\r\n          <p>{completedVideos[0].description}</p>\r\n          <div style={{ position: \"relative\", paddingBottom: \"56.25%\", height: 0, overflow: \"hidden\", maxWidth: \"100%\" }}>\r\n            <iframe\r\n              title={completedVideos[0].title}\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              src={`https://www.youtube.com/embed/${completedVideos[0].videoId}`}\r\n              frameBorder=\"0\"\r\n              allowFullScreen\r\n              style={{ position: \"absolute\", top: 0, left: 0 }}\r\n            />\r\n          </div>\r\n          <Text strong>This video is not live.</Text>\r\n          <Text>Published at: {moment(completedVideos[0].publishedAt).format(\"MMMM Do YYYY, HH:mm:ss\")}</Text>\r\n        </Card>\r\n      )}\r\n\r\n      <Typography.Title level={3}>Previous Completed Videos</Typography.Title>\r\n      <Row gutter={16}>\r\n        {completedVideos.slice(1).map((video, index) => (\r\n          <Col key={index} xs={24} sm={12} md={8} lg={6}>\r\n            <Card\r\n              hoverable\r\n              cover={<img alt={video.title} src={video.thumbnail} />}\r\n              onClick={() => handleThumbnailClick(video.videoId)}\r\n            >\r\n              <Meta title={video.title} description={`Published at: ${moment(video.publishedAt).format(\"MMMM Do YYYY, HH:mm:ss\")}`} />\r\n            </Card>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YoutubeLiveV3;\r\n"],"names":["Meta","Card","Text","Typography","YoutubeLiveV3","liveVideos","setLiveVideos","useState","completedVideos","setCompletedVideos","loading","setLoading","error","setError","useEffect","async","response","axios","get","data","liveVideosData","filter","video","live","completedVideosData","sort","a","b","Date","publishedAt","console","message","fetchVideos","_jsx","Spin","size","_jsxs","children","length","title","style","maxWidth","margin","marginBottom","description","position","paddingBottom","height","overflow","width","src","concat","videoId","frameBorder","allowFullScreen","top","left","strong","moment","format","Title","level","Row","gutter","slice","map","index","Col","xs","sm","md","lg","hoverable","cover","alt","thumbnail","onClick","handleThumbnailClick","window","open"],"sourceRoot":""}